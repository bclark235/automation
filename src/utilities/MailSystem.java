package utilities;

import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

public class MailSystem {
	
	 public static void autoSendMail(String emailS, String interType, int numRuns) throws AddressException, MessagingException {

	      // Put sender’s address
	      String from = "bclarkautomation@gmail.com";
	      final String username = "bclarkautomation@gmail.com";//username generated by Mailtrap
	      final String password = "veriTechYF1J";//password generated by Mailtrap
	      String to = emailS;

	      Properties props = new Properties();
	      props.put("mail.smtp.user", from);
	      props.put("mail.smtp.host", "smtp.gmail.com");
	      props.put("mail.smtp.port", "465");
	      props.put("mail.smtp.starttls.enable","true");
	      props.put("mail.smtp.auth", "true");
	      props.put("mail.smtp.socketFactory.port", "465");
	      props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
	      props.put("mail.smtp.socketFactory.fallback", "true");
	      
	      // Get the Session object.
	      Session session = Session.getInstance(props,
	         new javax.mail.Authenticator() {
	            protected PasswordAuthentication getPasswordAuthentication() {
	               return new PasswordAuthentication(username, password);
	            }});
	      
	      try {
	    	  // Create a default MimeMessage object.
	    	  Message message = new MimeMessage(session);
		 
	    	  // Set From: header field 
	    	  message.setFrom(new InternetAddress(from));
		    
	    	  // Set To: header field
	    	  message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
		    
	    	  // Set Subject: header field
	    	  message.setSubject("Chest Balancing Run: "+java.time.LocalDate.now());
		    
	    	  BodyPart messageBodyPart1 = new MimeBodyPart();  
	    	  messageBodyPart1.setText("Results Attached");  
		    
	    	  if(interType == "Duty of Care") {
	    		  // create new MimeBodyPart object and set DataHandler object to this object      
	    		  MimeBodyPart messageBodyPart2 = new MimeBodyPart();  
		      
	    		  String filenameSource = "C:\\chestRun"+java.time.LocalDate.now()+"_"+numRuns+"_runs.xls";//change accordingly  
	    		  String filename = "chestRun"+interType+java.time.LocalDate.now()+"_"+numRuns+"_runs.xls";
	    		  DataSource source = new FileDataSource(filenameSource);  
	    		  messageBodyPart2.setDataHandler(new DataHandler(source));  
	    		  messageBodyPart2.setFileName(filename);  
		        
	    		  MimeBodyPart messageBodyPart3 = new MimeBodyPart();
		        
	    		  filenameSource = "C:\\DutyofCare"+java.time.LocalDate.now()+".xls";//change accordingly  
	    		  filename = "DutyofCare"+interType+java.time.LocalDate.now()+".xls";
	    		  DataSource dutySource = new FileDataSource(filenameSource);  
	    		  messageBodyPart3.setDataHandler(new DataHandler(dutySource));  
	    		  messageBodyPart3.setFileName(filename);  
		         
	    		  // create Multipart object and add MimeBodyPart objects to this object      
	    		  Multipart multipart = new MimeMultipart();  
	    		  multipart.addBodyPart(messageBodyPart1);  
	    		  multipart.addBodyPart(messageBodyPart2);  
	    		  multipart.addBodyPart(messageBodyPart3);
		      
	    		  // set the multipart object to the message object  
	    		  message.setContent(multipart); 
	    	  }
	    	  else {
	    		  // create new MimeBodyPart object and set DataHandler object to this object      
	    		  MimeBodyPart messageBodyPart2 = new MimeBodyPart();  
		      
	    		  String filenameSource = "C:\\chestRun"+java.time.LocalDate.now()+"_"+numRuns+"_runs.xls";//change accordingly  
	    		  String filename = "chestRun"+interType+java.time.LocalDate.now()+"_"+numRuns+"_runs.xls";
	    		  DataSource source = new FileDataSource(filenameSource);  
	    		  messageBodyPart2.setDataHandler(new DataHandler(source));  
	    		  messageBodyPart2.setFileName(filename);  
		         
	    		  // create Multipart object and add MimeBodyPart objects to this object      
	    		  Multipart multipart = new MimeMultipart();  
	    		  multipart.addBodyPart(messageBodyPart1);  
	    		  multipart.addBodyPart(messageBodyPart2);  
		       
	    		  // set the multipart object to the message object  
	    		  message.setContent(multipart);	
	    	  }
		     
	    	  // Send message
	    	  Transport.send(message);
	      	} 
	      	catch (MessagingException e) {
	      		throw new RuntimeException(e);
	      	}
	  	}
	 
	 public static void autoYakMail(String emailS, String skillName, int taskNum, String pLevel, String yakTaskSelection) throws AddressException, MessagingException {

	      // Put sender’s address
	      String from = "bclarkautomation@gmail.com";
	      final String username = "bclarkautomation@gmail.com";//username generated by Mailtrap
	      final String password = "veriTechYF1J";//password generated by Mailtrap
	      String to = emailS;
	      String task;
	      
	      if(yakTaskSelection == "getvar runepass_task_progress_0") {
	    	  task = "task_A";
	      }
	      else {
	    	  task = "task_B";
	      }

	      Properties props = new Properties();
	      props.put("mail.smtp.user", from);
	      props.put("mail.smtp.host", "smtp.gmail.com");
	      props.put("mail.smtp.port", "465");
	      props.put("mail.smtp.starttls.enable","true");
	      props.put("mail.smtp.auth", "true");
	      props.put("mail.smtp.socketFactory.port", "465");
	      props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
	      props.put("mail.smtp.socketFactory.fallback", "true");
	      
	      // Get the Session object.
	      Session session = Session.getInstance(props,
	         new javax.mail.Authenticator() {
	            protected PasswordAuthentication getPasswordAuthentication() {
	               return new PasswordAuthentication(username, password);
	            }});
	      
	      try {
	    	  // Create a default MimeMessage object.
	    	  Message message = new MimeMessage(session);
		 
	    	  // Set From: header field 
	    	  message.setFrom(new InternetAddress(from));
		    
	    	  // Set To: header field
	    	  message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
		    
	    	  // Set Subject: header field
	    	  message.setSubject("Yak Skill Task Run: "+skillName+java.time.LocalDate.now());
		    
	    	  BodyPart messageBodyPart1 = new MimeBodyPart();  
	    	  messageBodyPart1.setText("Results Attached");  
		    
	    	  
	    	  // create new MimeBodyPart object and set DataHandler object to this object      
	    	  MimeBodyPart messageBodyPart2 = new MimeBodyPart(); 
		    
	    	  String filenameSource = "C:\\yakRun.txt";//change accordingly  
	    	  String filename = "yakRun_"+skillName+"_tier"+taskNum+"_"+task+"_Level"+pLevel+".txt";
	    	  DataSource source = new FileDataSource(filenameSource);  
	    	  messageBodyPart2.setDataHandler(new DataHandler(source));  
	    	  messageBodyPart2.setFileName(filename);   
		         
	    	  // create Multipart object and add MimeBodyPart objects to this object      
	    	  Multipart multipart = new MimeMultipart();  
	    	  multipart.addBodyPart(messageBodyPart1);  
	    	  multipart.addBodyPart(messageBodyPart2);  
	    	  
		      
	    	  // set the multipart object to the message object  
	    	  message.setContent(multipart); 
	    	  
		     
	    	  // Send message
	    	  Transport.send(message);
	      	} 
	      	catch (MessagingException e) {
	      		throw new RuntimeException(e);
	      	}
	  	}
}

